package main

import "fmt"

const gridSize = 9

func isSafe(board [][]int, row, col, num int) bool {
	// Check if 'num' is not present in the current row and column
	for i := 0; i < gridSize; i++ {
		if board[row][i] == num || board[i][col] == num {
			return false
		}
	}

	// Check if 'num' is not present in the current 3x3 subgrid
	startRow, startCol := row-row%3, col-col%3
	for i := 0; i < 3; i++ {
		for j := 0; j < 3; j++ {
			if board[startRow+i][startCol+j] == num {
				return false
			}
		}
	}

	return true
}

func solveSudoku(board [][]int) bool {
	var row, col int
	emptyCell := findEmptyCell(board, &row, &col)

	if !emptyCell {
		// No empty cell, puzzle is solved
		return true
	}

	for num := 1; num <= gridSize; num++ {
		if isSafe(board, row, col, num) {
			board[row][col] = num

			if solveSudoku(board) {
				return true // If the puzzle can be solved with the current assignment
			}

			// If the current assignment doesn't lead to a solution, backtrack
			board[row][col] = 0
		}
	}

	return false // No solution found
}

func findEmptyCell(board [][]int, row, col *int) bool {
	for i := 0; i < gridSize; i++ {
		for j := 0; j < gridSize; j++ {
			if board[i][j] == 0 {
				*row, *col = i, j
				return true
			}
		}
	}
	return false
}

func printBoard(board [][]int) {
	for i := 0; i < gridSize; i++ {
		fmt.Println(board[i])
	}
}

func main() {
	// Example Sudoku puzzle (0 represents empty cells)
	sudoku := [][]int{
		{5, 3, 0, 0, 7, 0, 0, 0, 0},
		{6, 0, 0, 1, 9, 5, 0, 0, 0},
		{0, 9, 8, 0, 0, 0, 0, 6, 0},
		{8, 0, 0, 0, 6, 0, 0, 0, 3},
		{4, 0, 0, 8, 0, 3, 0, 0, 1},
		{7, 0, 0, 0, 2, 0, 0, 0, 6},
		{0, 6, 0, 0, 0, 0, 2, 8, 0},
		{0, 0, 0, 4, 1, 9, 0, 0, 5},
		{0, 0, 0, 0, 8, 0, 0, 7, 9},
	}

	fmt.Println("Sudoku Puzzle:")
	printBoard(sudoku)

	if solveSudoku(sudoku) {
		fmt.Println("\nSolved Sudoku:")
		printBoard(sudoku)
	} else {
		fmt.Println("\nNo solution exists.")
	}
}
